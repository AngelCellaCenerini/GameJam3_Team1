//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controller/CharacterSwitch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterSwitch : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterSwitch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterSwitch"",
    ""maps"": [
        {
            ""name"": ""SwitchMesh"",
            ""id"": ""4e533668-ad65-4545-91e2-011521dac08a"",
            ""actions"": [
                {
                    ""name"": ""SwitchRight"",
                    ""type"": ""Button"",
                    ""id"": ""70254e37-6948-4698-822e-072c6820dfa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4372a863-671f-4672-859f-012b8cd3349b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13b35757-3fb6-41a6-a48d-7932c2665ff4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c67a252-89f4-40ae-82ae-89c1373c2a48"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwitchMesh
        m_SwitchMesh = asset.FindActionMap("SwitchMesh", throwIfNotFound: true);
        m_SwitchMesh_SwitchRight = m_SwitchMesh.FindAction("SwitchRight", throwIfNotFound: true);
        m_SwitchMesh_SwitchLeft = m_SwitchMesh.FindAction("SwitchLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwitchMesh
    private readonly InputActionMap m_SwitchMesh;
    private ISwitchMeshActions m_SwitchMeshActionsCallbackInterface;
    private readonly InputAction m_SwitchMesh_SwitchRight;
    private readonly InputAction m_SwitchMesh_SwitchLeft;
    public struct SwitchMeshActions
    {
        private @CharacterSwitch m_Wrapper;
        public SwitchMeshActions(@CharacterSwitch wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchRight => m_Wrapper.m_SwitchMesh_SwitchRight;
        public InputAction @SwitchLeft => m_Wrapper.m_SwitchMesh_SwitchLeft;
        public InputActionMap Get() { return m_Wrapper.m_SwitchMesh; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwitchMeshActions set) { return set.Get(); }
        public void SetCallbacks(ISwitchMeshActions instance)
        {
            if (m_Wrapper.m_SwitchMeshActionsCallbackInterface != null)
            {
                @SwitchRight.started -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchRight;
                @SwitchRight.performed -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchRight;
                @SwitchRight.canceled -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchRight;
                @SwitchLeft.started -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchLeft;
                @SwitchLeft.performed -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchLeft;
                @SwitchLeft.canceled -= m_Wrapper.m_SwitchMeshActionsCallbackInterface.OnSwitchLeft;
            }
            m_Wrapper.m_SwitchMeshActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchRight.started += instance.OnSwitchRight;
                @SwitchRight.performed += instance.OnSwitchRight;
                @SwitchRight.canceled += instance.OnSwitchRight;
                @SwitchLeft.started += instance.OnSwitchLeft;
                @SwitchLeft.performed += instance.OnSwitchLeft;
                @SwitchLeft.canceled += instance.OnSwitchLeft;
            }
        }
    }
    public SwitchMeshActions @SwitchMesh => new SwitchMeshActions(this);
    public interface ISwitchMeshActions
    {
        void OnSwitchRight(InputAction.CallbackContext context);
        void OnSwitchLeft(InputAction.CallbackContext context);
    }
}
